import './NavigationLinks.svelte.css.proxy.js';
/* src/components/Footer/NavigationLinks.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_block,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text,
	update_keyed_each
} from "../../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../../_snowpack/pkg/svelte.js";

// navigation query
import { GET_MAIN_FOOTER } from "./queries.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (41:14) {#each item.children as item (item.url)}
function create_each_block_1(key_1, ctx) {
	let li;
	let a;
	let t_value = /*item*/ ctx[2].name + "";
	let t;
	let a_href_value;

	return {
		key: key_1,
		first: null,
		c() {
			li = element("li");
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", { style: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "class", "title svelte-1ms66vb");
			attr(a, "href", a_href_value = /*item*/ ctx[2].url);
			set_style(li, "width", "100%");
			this.first = li;
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*items*/ 1 && t_value !== (t_value = /*item*/ ctx[2].name + "")) set_data(t, t_value);

			if (dirty & /*items*/ 1 && a_href_value !== (a_href_value = /*item*/ ctx[2].url)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (35:8) {#each items as item (item.url)}
function create_each_block(key_1, ctx) {
	let div;
	let ul;
	let li;
	let h5;
	let a;
	let t0_value = /*item*/ ctx[2].name + "";
	let t0;
	let a_href_value;
	let t1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t2;
	let each_value_1 = /*item*/ ctx[2].children;
	const get_key = ctx => /*item*/ ctx[2].url;

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
	}

	return {
		key: key_1,
		first: null,
		c() {
			div = element("div");
			ul = element("ul");
			li = element("li");
			h5 = element("h5");
			a = element("a");
			t0 = text(t0_value);
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			ul = claim_element(div_nodes, "UL", {});
			var ul_nodes = children(ul);
			li = claim_element(ul_nodes, "LI", { style: true });
			var li_nodes = children(li);
			h5 = claim_element(li_nodes, "H5", {});
			var h5_nodes = children(h5);
			a = claim_element(h5_nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, t0_value);
			a_nodes.forEach(detach);
			h5_nodes.forEach(detach);
			li_nodes.forEach(detach);
			t1 = claim_space(ul_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach);
			t2 = claim_space(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "class", "title svelte-1ms66vb");
			attr(a, "href", a_href_value = /*item*/ ctx[2].url);
			set_style(li, "width", "100%");
			attr(div, "class", "col s12 m3");
			this.first = div;
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, ul);
			append(ul, li);
			append(li, h5);
			append(h5, a);
			append(a, t0);
			append(ul, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append(div, t2);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*items*/ 1 && t0_value !== (t0_value = /*item*/ ctx[2].name + "")) set_data(t0, t0_value);

			if (dirty & /*items*/ 1 && a_href_value !== (a_href_value = /*item*/ ctx[2].url)) {
				attr(a, "href", a_href_value);
			}

			if (dirty & /*items*/ 1) {
				each_value_1 = /*item*/ ctx[2].children;
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, ul, destroy_block, create_each_block_1, null, get_each_context_1);
			}
		},
		d(detaching) {
			if (detaching) detach(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

function create_fragment(ctx) {
	let div4;
	let div3;
	let div0;
	let t;
	let div2;
	let div1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_value = /*items*/ ctx[0];
	const get_key = ctx => /*item*/ ctx[2].url;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			t = space();
			div2 = element("div");
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true, style: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			children(div0).forEach(detach);
			t = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true, style: true });
			var div1_nodes = children(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div1_nodes);
			}

			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "col s0 m1");
			attr(div1, "class", "row");
			set_style(div1, "padding", "4em 0");
			set_style(div1, "margin", "0 -0.75em");
			attr(div2, "class", "col s12 m10");
			attr(div3, "class", "row");
			set_style(div3, "margin", "0");
			attr(div4, "class", "footer svelte-1ms66vb");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div3);
			append(div3, div0);
			append(div3, t);
			append(div3, div2);
			append(div2, div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*items*/ 1) {
				each_value = /*items*/ ctx[0];
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div1, destroy_block, create_each_block, null, get_each_context);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div4);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let items = [];
	let media;

	onMount(() => {
		media = window.location.host;

		// navigation request
		fetch(`./media/${media}/data.json`, {
			method: "GET",
			headers: {
				"Content-Type": "application/json",
				"Accept": "application/json"
			}
		}).then(r => r.json()).then(value => {
			console.log("navigation footer:", value);
			$$invalidate(0, items = value.footer);
		});
	});

	return [items];
}

class NavigationLinks extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default NavigationLinks;
//# sourceMappingURL=NavigationLinks.svelte.js.map
