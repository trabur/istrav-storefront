/* src/components/Header/Navigation.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_block,
	detach,
	element,
	empty,
	init,
	insert,
	is_function,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text,
	update_keyed_each
} from "../../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../../_snowpack/pkg/svelte.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

// (70:6) {:else}
function create_else_block(ctx) {
	let li;
	let a;
	let i;
	let t;

	return {
		c() {
			li = element("li");
			a = element("a");
			i = element("i");
			t = text("person");
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true, "data-target": true });
			var a_nodes = children(a);
			i = claim_element(a_nodes, "I", { class: true });
			var i_nodes = children(i);
			t = claim_text(i_nodes, "person");
			i_nodes.forEach(detach);
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(i, "class", "material-icons");
			attr(a, "href", "/login");
			attr(a, "data-target", "slide-out");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, i);
			append(i, t);
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (68:6) {#if token}
function create_if_block_1(ctx) {
	let li;
	let a;
	let i;
	let t;

	return {
		c() {
			li = element("li");
			a = element("a");
			i = element("i");
			t = text("person");
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true, "data-target": true });
			var a_nodes = children(a);
			i = claim_element(a_nodes, "I", { class: true });
			var i_nodes = children(i);
			t = claim_text(i_nodes, "person");
			i_nodes.forEach(detach);
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(i, "class", "material-icons");
			attr(a, "href", "/account");
			attr(a, "data-target", "slide-out");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, i);
			append(i, t);
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (77:6) {#each items as item (item.url)}
function create_each_block_3(key_1, ctx) {
	let li;
	let a;
	let t_value = /*item*/ ctx[17].name + "";
	let t;
	let a_href_value;
	let mounted;
	let dispose;

	return {
		key: key_1,
		first: null,
		c() {
			li = element("li");
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", a_href_value = /*item*/ ctx[17].url);
			this.first = li;
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t);

			if (!mounted) {
				dispose = listen(a, "mouseover", function () {
					if (is_function(/*setCategoryId*/ ctx[8](/*item*/ ctx[17].slug))) /*setCategoryId*/ ctx[8](/*item*/ ctx[17].slug).apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*items*/ 2 && t_value !== (t_value = /*item*/ ctx[17].name + "")) set_data(t, t_value);

			if (dirty & /*items*/ 2 && a_href_value !== (a_href_value = /*item*/ ctx[17].url)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

// (82:2) {#if extendNav}
function create_if_block(ctx) {
	let div;
	let ul;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_value_2 = /*subItems*/ ctx[2];
	const get_key = ctx => /*item*/ ctx[17].url;

	for (let i = 0; i < each_value_2.length; i += 1) {
		let child_ctx = get_each_context_2(ctx, each_value_2, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_2(key, child_ctx));
	}

	return {
		c() {
			div = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			ul = claim_element(div_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(ul, "class", "tabs tabs-transparent");
			attr(div, "class", "nav-content");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*subItems*/ 4) {
				each_value_2 = /*subItems*/ ctx[2];
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_2, each_1_lookup, ul, destroy_block, create_each_block_2, null, get_each_context_2);
			}
		},
		d(detaching) {
			if (detaching) detach(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

// (85:8) {#each subItems as item (item.url)}
function create_each_block_2(key_1, ctx) {
	let li;
	let a;
	let t_value = /*item*/ ctx[17].name + "";
	let t;
	let a_href_value;

	return {
		key: key_1,
		first: null,
		c() {
			li = element("li");
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", a_href_value = /*item*/ ctx[17].url);
			attr(li, "class", "tab");
			this.first = li;
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*subItems*/ 4 && t_value !== (t_value = /*item*/ ctx[17].name + "")) set_data(t, t_value);

			if (dirty & /*subItems*/ 4 && a_href_value !== (a_href_value = /*item*/ ctx[17].url)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (104:4) {#each item.children as item (item.url)}
function create_each_block_1(key_1, ctx) {
	let li;
	let a;
	let t_value = /*item*/ ctx[17].name + "";
	let t;
	let a_href_value;
	let mounted;
	let dispose;

	return {
		key: key_1,
		first: null,
		c() {
			li = element("li");
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", { class: true, style: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", a_href_value = /*item*/ ctx[17].url);
			attr(li, "class", "waves-effect");
			set_style(li, "width", "100%");
			set_style(li, "padding-left", "1em");
			this.first = li;
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t);

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler_4*/ ctx[14]);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*items*/ 2 && t_value !== (t_value = /*item*/ ctx[17].name + "")) set_data(t, t_value);

			if (dirty & /*items*/ 2 && a_href_value !== (a_href_value = /*item*/ ctx[17].url)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

// (102:2) {#each items as item (item.url)}
function create_each_block(key_1, ctx) {
	let li;
	let a;
	let t0_value = /*item*/ ctx[17].name + "";
	let t0;
	let a_href_value;
	let t1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let mounted;
	let dispose;
	let each_value_1 = /*item*/ ctx[17].children;
	const get_key = ctx => /*item*/ ctx[17].url;

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
	}

	return {
		key: key_1,
		first: null,
		c() {
			li = element("li");
			a = element("a");
			t0 = text(t0_value);
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", { class: true, style: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, t0_value);
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			t1 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},
		h() {
			attr(a, "href", a_href_value = /*item*/ ctx[17].url);
			attr(li, "class", "waves-effect");
			set_style(li, "width", "100%");
			this.first = li;
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t0);
			insert(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler_3*/ ctx[13]);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*items*/ 2 && t0_value !== (t0_value = /*item*/ ctx[17].name + "")) set_data(t0, t0_value);

			if (dirty & /*items*/ 2 && a_href_value !== (a_href_value = /*item*/ ctx[17].url)) {
				attr(a, "href", a_href_value);
			}

			if (dirty & /*items, instance*/ 34) {
				each_value_1 = /*item*/ ctx[17].children;
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, each_1_anchor.parentNode, destroy_block, create_each_block_1, each_1_anchor, get_each_context_1);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
			if (detaching) detach(t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let nav;
	let div;
	let ul0;
	let li0;
	let a0;
	let i0;
	let t0;
	let t1;
	let a1;
	let t2;
	let t3;
	let a2;
	let t4;
	let t5;
	let ul1;
	let t6;
	let li1;
	let a3;
	let i1;
	let t7;
	let t8;
	let li2;
	let a4;
	let i2;
	let t9;
	let t10;
	let ul2;
	let each_blocks_1 = [];
	let each0_lookup = new Map();
	let t11;
	let nav_class_value;
	let t12;
	let ul3;
	let li3;
	let h50;
	let t13;
	let t14;
	let each_blocks = [];
	let each1_lookup = new Map();
	let t15;
	let ul4;
	let li4;
	let h51;
	let t16;
	let t17;
	let ul5;
	let li5;
	let h52;
	let t18;
	let t19;
	let ul6;
	let li6;
	let h53;
	let t20;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*token*/ ctx[3]) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block0 = current_block_type(ctx);
	let each_value_3 = /*items*/ ctx[1];
	const get_key = ctx => /*item*/ ctx[17].url;

	for (let i = 0; i < each_value_3.length; i += 1) {
		let child_ctx = get_each_context_3(ctx, each_value_3, i);
		let key = get_key(child_ctx);
		each0_lookup.set(key, each_blocks_1[i] = create_each_block_3(key, child_ctx));
	}

	let if_block1 = /*extendNav*/ ctx[0] && create_if_block(ctx);
	let each_value = /*items*/ ctx[1];
	const get_key_1 = ctx => /*item*/ ctx[17].url;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key_1(child_ctx);
		each1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			nav = element("nav");
			div = element("div");
			ul0 = element("ul");
			li0 = element("li");
			a0 = element("a");
			i0 = element("i");
			t0 = text("menu");
			t1 = space();
			a1 = element("a");
			t2 = text(/*name*/ ctx[4]);
			t3 = space();
			a2 = element("a");
			t4 = text(/*name*/ ctx[4]);
			t5 = space();
			ul1 = element("ul");
			if_block0.c();
			t6 = space();
			li1 = element("li");
			a3 = element("a");
			i1 = element("i");
			t7 = text("shopping_cart");
			t8 = space();
			li2 = element("li");
			a4 = element("a");
			i2 = element("i");
			t9 = text("search");
			t10 = space();
			ul2 = element("ul");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t11 = space();
			if (if_block1) if_block1.c();
			t12 = space();
			ul3 = element("ul");
			li3 = element("li");
			h50 = element("h5");
			t13 = text(/*name*/ ctx[4]);
			t14 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t15 = space();
			ul4 = element("ul");
			li4 = element("li");
			h51 = element("h5");
			t16 = text("person");
			t17 = space();
			ul5 = element("ul");
			li5 = element("li");
			h52 = element("h5");
			t18 = text("cart");
			t19 = space();
			ul6 = element("ul");
			li6 = element("li");
			h53 = element("h5");
			t20 = text("search");
			this.h();
		},
		l(nodes) {
			nav = claim_element(nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			div = claim_element(nav_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			ul0 = claim_element(div_nodes, "UL", { class: true });
			var ul0_nodes = children(ul0);
			li0 = claim_element(ul0_nodes, "LI", {});
			var li0_nodes = children(li0);
			a0 = claim_element(li0_nodes, "A", { href: true, "data-target": true });
			var a0_nodes = children(a0);
			i0 = claim_element(a0_nodes, "I", { class: true });
			var i0_nodes = children(i0);
			t0 = claim_text(i0_nodes, "menu");
			i0_nodes.forEach(detach);
			a0_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			t1 = claim_space(div_nodes);
			a1 = claim_element(div_nodes, "A", { href: true, class: true, style: true });
			var a1_nodes = children(a1);
			t2 = claim_text(a1_nodes, /*name*/ ctx[4]);
			a1_nodes.forEach(detach);
			t3 = claim_space(div_nodes);
			a2 = claim_element(div_nodes, "A", { href: true, class: true });
			var a2_nodes = children(a2);
			t4 = claim_text(a2_nodes, /*name*/ ctx[4]);
			a2_nodes.forEach(detach);
			t5 = claim_space(div_nodes);
			ul1 = claim_element(div_nodes, "UL", { class: true });
			var ul1_nodes = children(ul1);
			if_block0.l(ul1_nodes);
			t6 = claim_space(ul1_nodes);
			li1 = claim_element(ul1_nodes, "LI", {});
			var li1_nodes = children(li1);
			a3 = claim_element(li1_nodes, "A", { href: true, "data-target": true });
			var a3_nodes = children(a3);
			i1 = claim_element(a3_nodes, "I", { class: true });
			var i1_nodes = children(i1);
			t7 = claim_text(i1_nodes, "shopping_cart");
			i1_nodes.forEach(detach);
			a3_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			t8 = claim_space(ul1_nodes);
			li2 = claim_element(ul1_nodes, "LI", {});
			var li2_nodes = children(li2);
			a4 = claim_element(li2_nodes, "A", { href: true, "data-target": true });
			var a4_nodes = children(a4);
			i2 = claim_element(a4_nodes, "I", { class: true });
			var i2_nodes = children(i2);
			t9 = claim_text(i2_nodes, "search");
			i2_nodes.forEach(detach);
			a4_nodes.forEach(detach);
			li2_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			t10 = claim_space(div_nodes);
			ul2 = claim_element(div_nodes, "UL", { id: true, class: true });
			var ul2_nodes = children(ul2);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(ul2_nodes);
			}

			ul2_nodes.forEach(detach);
			div_nodes.forEach(detach);
			t11 = claim_space(nav_nodes);
			if (if_block1) if_block1.l(nav_nodes);
			nav_nodes.forEach(detach);
			t12 = claim_space(nodes);
			ul3 = claim_element(nodes, "UL", { id: true, class: true });
			var ul3_nodes = children(ul3);
			li3 = claim_element(ul3_nodes, "LI", {});
			var li3_nodes = children(li3);
			h50 = claim_element(li3_nodes, "H5", { style: true });
			var h50_nodes = children(h50);
			t13 = claim_text(h50_nodes, /*name*/ ctx[4]);
			h50_nodes.forEach(detach);
			li3_nodes.forEach(detach);
			t14 = claim_space(ul3_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul3_nodes);
			}

			ul3_nodes.forEach(detach);
			t15 = claim_space(nodes);
			ul4 = claim_element(nodes, "UL", { id: true, class: true });
			var ul4_nodes = children(ul4);
			li4 = claim_element(ul4_nodes, "LI", {});
			var li4_nodes = children(li4);
			h51 = claim_element(li4_nodes, "H5", { style: true });
			var h51_nodes = children(h51);
			t16 = claim_text(h51_nodes, "person");
			h51_nodes.forEach(detach);
			li4_nodes.forEach(detach);
			ul4_nodes.forEach(detach);
			t17 = claim_space(nodes);
			ul5 = claim_element(nodes, "UL", { id: true, class: true });
			var ul5_nodes = children(ul5);
			li5 = claim_element(ul5_nodes, "LI", {});
			var li5_nodes = children(li5);
			h52 = claim_element(li5_nodes, "H5", { style: true });
			var h52_nodes = children(h52);
			t18 = claim_text(h52_nodes, "cart");
			h52_nodes.forEach(detach);
			li5_nodes.forEach(detach);
			ul5_nodes.forEach(detach);
			t19 = claim_space(nodes);
			ul6 = claim_element(nodes, "UL", { id: true, class: true });
			var ul6_nodes = children(ul6);
			li6 = claim_element(ul6_nodes, "LI", {});
			var li6_nodes = children(li6);
			h53 = claim_element(li6_nodes, "H5", { style: true });
			var h53_nodes = children(h53);
			t20 = claim_text(h53_nodes, "search");
			h53_nodes.forEach(detach);
			li6_nodes.forEach(detach);
			ul6_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(i0, "class", "material-icons");
			attr(a0, "href", "#");
			attr(a0, "data-target", "slide-out");
			attr(ul0, "class", "left");
			attr(a1, "href", "/");
			attr(a1, "class", "brand-logo left hide-on-large-only");
			set_style(a1, "margin-left", "1.75em");
			attr(a2, "href", "/");
			attr(a2, "class", "brand-logo center hide-on-med-and-down");
			attr(i1, "class", "material-icons");
			attr(a3, "href", "#");
			attr(a3, "data-target", "slide-out");
			attr(i2, "class", "material-icons");
			attr(a4, "href", "#");
			attr(a4, "data-target", "slide-out");
			attr(ul1, "class", "right");
			attr(ul2, "id", "nav-mobile");
			attr(ul2, "class", "left hide-on-med-and-down");
			attr(div, "class", "nav-wrapper");
			attr(nav, "class", nav_class_value = /*extendNav*/ ctx[0] ? `nav-extended` : "");
			set_style(h50, "text-align", "center");
			attr(ul3, "id", "main");
			attr(ul3, "class", "sidenav");
			set_style(h51, "text-align", "center");
			attr(ul4, "id", "person");
			attr(ul4, "class", "sidenav");
			set_style(h52, "text-align", "center");
			attr(ul5, "id", "cart");
			attr(ul5, "class", "sidenav");
			set_style(h53, "text-align", "center");
			attr(ul6, "id", "search");
			attr(ul6, "class", "sidenav");
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, div);
			append(div, ul0);
			append(ul0, li0);
			append(li0, a0);
			append(a0, i0);
			append(i0, t0);
			append(div, t1);
			append(div, a1);
			append(a1, t2);
			append(div, t3);
			append(div, a2);
			append(a2, t4);
			append(div, t5);
			append(div, ul1);
			if_block0.m(ul1, null);
			append(ul1, t6);
			append(ul1, li1);
			append(li1, a3);
			append(a3, i1);
			append(i1, t7);
			append(ul1, t8);
			append(ul1, li2);
			append(li2, a4);
			append(a4, i2);
			append(i2, t9);
			append(div, t10);
			append(div, ul2);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(ul2, null);
			}

			append(nav, t11);
			if (if_block1) if_block1.m(nav, null);
			insert(target, t12, anchor);
			insert(target, ul3, anchor);
			append(ul3, li3);
			append(li3, h50);
			append(h50, t13);
			append(ul3, t14);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul3, null);
			}

			insert(target, t15, anchor);
			insert(target, ul4, anchor);
			append(ul4, li4);
			append(li4, h51);
			append(h51, t16);
			insert(target, t17, anchor);
			insert(target, ul5, anchor);
			append(ul5, li5);
			append(li5, h52);
			append(h52, t18);
			insert(target, t19, anchor);
			insert(target, ul6, anchor);
			append(ul6, li6);
			append(li6, h53);
			append(h53, t20);

			if (!mounted) {
				dispose = [
					listen(a0, "click", /*click_handler*/ ctx[9]),
					listen(a3, "click", /*click_handler_1*/ ctx[10]),
					listen(a4, "click", /*click_handler_2*/ ctx[11]),
					listen(nav, "mouseleave", /*mouseleave_handler*/ ctx[12])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 16) set_data(t2, /*name*/ ctx[4]);
			if (dirty & /*name*/ 16) set_data(t4, /*name*/ ctx[4]);

			if (current_block_type !== (current_block_type = select_block_type(ctx, dirty))) {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(ul1, t6);
				}
			}

			if (dirty & /*items, setCategoryId*/ 258) {
				each_value_3 = /*items*/ ctx[1];
				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx, each_value_3, each0_lookup, ul2, destroy_block, create_each_block_3, null, get_each_context_3);
			}

			if (/*extendNav*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(nav, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*extendNav*/ 1 && nav_class_value !== (nav_class_value = /*extendNav*/ ctx[0] ? `nav-extended` : "")) {
				attr(nav, "class", nav_class_value);
			}

			if (dirty & /*name*/ 16) set_data(t13, /*name*/ ctx[4]);

			if (dirty & /*items, instance*/ 34) {
				each_value = /*items*/ ctx[1];
				each_blocks = update_keyed_each(each_blocks, dirty, get_key_1, 1, ctx, each_value, each1_lookup, ul3, destroy_block, create_each_block, null, get_each_context);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(nav);
			if_block0.d();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].d();
			}

			if (if_block1) if_block1.d();
			if (detaching) detach(t12);
			if (detaching) detach(ul3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			if (detaching) detach(t15);
			if (detaching) detach(ul4);
			if (detaching) detach(t17);
			if (detaching) detach(ul5);
			if (detaching) detach(t19);
			if (detaching) detach(ul6);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance_1($$self, $$props, $$invalidate) {
	let extendNav = false;
	let categoryId = "";
	let items = [];
	let subItems = [];
	let token = null;
	let name = "";

	function setCategoryId(id) {
		$$invalidate(0, extendNav = true);
		categoryId = id;

		$$invalidate(2, subItems = items.filter((value, index) => {
			return value.id === categoryId;
		})[0].children);
	} // console.log('subItems', subItems)

	// sidebars
	let instance;

	let instancePerson;
	let instanceCart;
	let instanceSearch;

	onMount(() => {
		// user
		$$invalidate(3, token = localStorage.getItem("token"));

		// main sidebar
		var elem = document.querySelector("#main");

		$$invalidate(5, instance = M.Sidenav.init(elem, { edge: "left" }));

		// right sidebars
		var elemPerson = document.querySelector("#person");

		instancePerson = M.Sidenav.init(elemPerson, { edge: "right" });
		var elemCart = document.querySelector("#cart");
		$$invalidate(6, instanceCart = M.Sidenav.init(elemCart, { edge: "right" }));
		var elemSearch = document.querySelector("#search");
		$$invalidate(7, instanceSearch = M.Sidenav.init(elemSearch, { edge: "right" }));
		let media = window.location.host;

		// navigation request
		fetch(`./media/${media}/data.json`, {
			method: "GET",
			headers: {
				"Content-Type": "application/json",
				"Accept": "application/json"
			}
		}).then(r => r.json()).then(value => {
			console.log("navigation main:", value);
			$$invalidate(1, items = value.menu);
			$$invalidate(4, name = value.name);
		});
	});

	const click_handler = () => instance.open();
	const click_handler_1 = () => instanceCart.open();
	const click_handler_2 = () => instanceSearch.open();
	const mouseleave_handler = () => $$invalidate(0, extendNav = false);
	const click_handler_3 = () => instance.close();
	const click_handler_4 = () => instance.close();

	return [
		extendNav,
		items,
		subItems,
		token,
		name,
		instance,
		instanceCart,
		instanceSearch,
		setCategoryId,
		click_handler,
		click_handler_1,
		click_handler_2,
		mouseleave_handler,
		click_handler_3,
		click_handler_4
	];
}

class Navigation extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance_1, create_fragment, safe_not_equal, {});
	}
}

export default Navigation;
//# sourceMappingURL=Navigation.svelte.js.map
