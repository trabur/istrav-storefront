/* src/components/Footer/Main.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_component,
	claim_element,
	claim_space,
	create_component,
	create_slot,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out,
	update_slot
} from "../../_snowpack/pkg/svelte/internal.js";

import SocialLinks from "./SocialLinks.svelte.js";
import NavigationLinks from "./NavigationLinks.svelte.js";

function create_fragment(ctx) {
	let br0;
	let t0;
	let br1;
	let t1;
	let nav;
	let div2;
	let div0;
	let t2;
	let div1;
	let t3;
	let sociallinks;
	let t4;
	let navigationlinks;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);
	sociallinks = new SocialLinks({});
	navigationlinks = new NavigationLinks({});

	return {
		c() {
			br0 = element("br");
			t0 = space();
			br1 = element("br");
			t1 = space();
			nav = element("nav");
			div2 = element("div");
			div0 = element("div");
			t2 = space();
			div1 = element("div");
			if (default_slot) default_slot.c();
			t3 = space();
			create_component(sociallinks.$$.fragment);
			t4 = space();
			create_component(navigationlinks.$$.fragment);
			this.h();
		},
		l(nodes) {
			br0 = claim_element(nodes, "BR", {});
			t0 = claim_space(nodes);
			br1 = claim_element(nodes, "BR", {});
			t1 = claim_space(nodes);
			nav = claim_element(nodes, "NAV", { class: true, style: true });
			var nav_nodes = children(nav);
			div2 = claim_element(nav_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			children(div0).forEach(detach);
			t2 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (default_slot) default_slot.l(div1_nodes);
			t3 = claim_space(div1_nodes);
			claim_component(sociallinks.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			nav_nodes.forEach(detach);
			t4 = claim_space(nodes);
			claim_component(navigationlinks.$$.fragment, nodes);
			this.h();
		},
		h() {
			attr(div0, "class", "col s0 m1");
			attr(div1, "class", "col s12 m10");
			attr(div2, "class", "row");
			attr(nav, "class", "teal lighten-2");
			set_style(nav, "position", "absolute");
		},
		m(target, anchor) {
			insert(target, br0, anchor);
			insert(target, t0, anchor);
			insert(target, br1, anchor);
			insert(target, t1, anchor);
			insert(target, nav, anchor);
			append(nav, div2);
			append(div2, div0);
			append(div2, t2);
			append(div2, div1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append(div1, t3);
			mount_component(sociallinks, div1, null);
			insert(target, t4, anchor);
			mount_component(navigationlinks, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[0], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(sociallinks.$$.fragment, local);
			transition_in(navigationlinks.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(sociallinks.$$.fragment, local);
			transition_out(navigationlinks.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(br0);
			if (detaching) detach(t0);
			if (detaching) detach(br1);
			if (detaching) detach(t1);
			if (detaching) detach(nav);
			if (default_slot) default_slot.d(detaching);
			destroy_component(sociallinks);
			if (detaching) detach(t4);
			destroy_component(navigationlinks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class Main extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Main;
//# sourceMappingURL=Main.svelte.js.map
