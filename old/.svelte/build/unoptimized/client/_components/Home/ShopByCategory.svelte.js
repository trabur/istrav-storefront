import './ShopByCategory.svelte.css.proxy.js';
/* src/components/Home/ShopByCategory.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_block,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text,
	update_keyed_each
} from "../../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../../_snowpack/pkg/svelte.js";
import { GET_CATEGORIES } from "./queries.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (31:6) {#each items as item (item.slug)}
function create_each_block(key_1, ctx) {
	let div1;
	let a;
	let div0;
	let h5;
	let t0_value = /*item*/ ctx[2].name + "";
	let t0;
	let div0_style_value;
	let a_href_value;
	let t1;

	return {
		key: key_1,
		first: null,
		c() {
			div1 = element("div");
			a = element("a");
			div0 = element("div");
			h5 = element("h5");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			a = claim_element(div1_nodes, "A", { href: true });
			var a_nodes = children(a);
			div0 = claim_element(a_nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			h5 = claim_element(div0_nodes, "H5", { class: true });
			var h5_nodes = children(h5);
			t0 = claim_text(h5_nodes, t0_value);
			h5_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			a_nodes.forEach(detach);
			t1 = claim_space(div1_nodes);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h5, "class", "subtitle svelte-127i5hm");
			attr(div0, "class", "image svelte-127i5hm");
			attr(div0, "style", div0_style_value = `background-image: url(./media/${/*media*/ ctx[1]}/${/*item*/ ctx[2].image});`);
			attr(a, "href", a_href_value = `/category/${/*item*/ ctx[2].slug}`);
			attr(div1, "class", "item svelte-127i5hm");
			this.first = div1;
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, a);
			append(a, div0);
			append(div0, h5);
			append(h5, t0);
			append(div1, t1);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*items*/ 1 && t0_value !== (t0_value = /*item*/ ctx[2].name + "")) set_data(t0, t0_value);

			if (dirty & /*media, items*/ 3 && div0_style_value !== (div0_style_value = `background-image: url(./media/${/*media*/ ctx[1]}/${/*item*/ ctx[2].image});`)) {
				attr(div0, "style", div0_style_value);
			}

			if (dirty & /*items*/ 1 && a_href_value !== (a_href_value = `/category/${/*item*/ ctx[2].slug}`)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let div0;
	let t0;
	let div2;
	let h3;
	let t1;
	let t2;
	let div1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_value = /*items*/ ctx[0];
	const get_key = ctx => /*item*/ ctx[2].slug;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			div3 = element("div");
			div0 = element("div");
			t0 = space();
			div2 = element("div");
			h3 = element("h3");
			t1 = text("SHOP BY CATEGORY");
			t2 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			children(div0).forEach(detach);
			t0 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			h3 = claim_element(div2_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t1 = claim_text(h3_nodes, "SHOP BY CATEGORY");
			h3_nodes.forEach(detach);
			t2 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div1_nodes);
			}

			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "col s0 m1");
			attr(h3, "class", "title svelte-127i5hm");
			attr(div1, "class", "masonry svelte-127i5hm");
			attr(div2, "class", "col s12 m10");
			attr(div3, "class", "row");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div0);
			append(div3, t0);
			append(div3, div2);
			append(div2, h3);
			append(h3, t1);
			append(div2, t2);
			append(div2, div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*items, media*/ 3) {
				each_value = /*items*/ ctx[0];
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div1, destroy_block, create_each_block, null, get_each_context);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let items = [];
	let media;

	onMount(() => {
		$$invalidate(1, media = window.location.host);

		// data request
		fetch(`./media/${media}/data.json`, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				"Accept": "application/json"
			}
		}).then(r => r.json()).then(value => {
			console.log("value.categories:", value);
			$$invalidate(0, items = value.shopByCategory);
		});
	});

	return [items, media];
}

class ShopByCategory extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default ShopByCategory;
//# sourceMappingURL=ShopByCategory.svelte.js.map
